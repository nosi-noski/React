{"version":3,"sources":["components/Dialogs/Dialogs.module.css","components/Dialogs/MessageItem/MessageItem.module.css","components/Dialogs/DialogItem/DialogItem.jsx","components/Dialogs/MessageItem/MessageItem.jsx","redux/store.js","components/Dialogs/Dialogs.jsx","components/Dialogs/DialogsContainer.jsx"],"names":["module","exports","DialogItem","props","path","dialogId","className","classes","dialog","to","activeClassName","activeLink","name","MessageItem","myCloudColorClass","userid","alignText","hiddenAuthor","order","sameNextUserId","radiusBottomNone","radiusTopRightNone","samePrevUserId","authorName","authorId","array","length","i","id","getAuthorName","dialogsPage","dialogs","messages","message","messageCloud","onMouseOver","e","currentTarget","parentElement","children","classList","add","author","maxLength140","maxLengthThunkCreator","AddMessageReduxForm","reduxForm","form","onSubmit","handleSubmit","newTextArea","Field","component","TextArea","validate","required","placeholder","buttons","textAdd","textRemove","Dialogs","state","dialogsElements","map","d","messagesElements","m","arr","messagesElement","React","createRef","useEffect","isAuth","current","scrollTo","scrollHeight","dialogsItems","ref","newPostArea","values","addMessage","newMessageText","compose","connect","dispatch","sendNewMessageCreator","removeMessage","alert","withAuthRedirect"],"mappings":"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","file":"static/js/4.01d029ab.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialogs\":\"Dialogs_dialogs__1Lgi8\",\"dialogsItems\":\"Dialogs_dialogsItems__3jEqk\",\"active\":\"Dialogs_active__2Pwlb\",\"dialog\":\"Dialogs_dialog__2W2gn\",\"activeLink\":\"Dialogs_activeLink__2QnIJ\",\"messages\":\"Dialogs_messages__1eioM\",\"newPostArea\":\"Dialogs_newPostArea__1BvXo\",\"newTextArea\":\"Dialogs_newTextArea__2srXD\",\"buttons\":\"Dialogs_buttons__aUsoV\",\"textAdd\":\"Dialogs_textAdd__268cn\",\"textRemove\":\"Dialogs_textRemove__3HGN_\",\"posts\":\"Dialogs_posts__3vb8k\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"messages\":\"MessageItem_messages__8iSGl\",\"message\":\"MessageItem_message__2U8-k\",\"messageAlignLeft\":\"MessageItem_messageAlignLeft__3oNQw\",\"messageAlignRight\":\"MessageItem_messageAlignRight__T_wqU\",\"logo\":\"MessageItem_logo__1w8ZH\",\"author\":\"MessageItem_author__2P8KD\",\"hiddenAuthor\":\"MessageItem_hiddenAuthor__kKdyR\",\"authorHovered\":\"MessageItem_authorHovered__3ItFa\",\"messageCloud\":\"MessageItem_messageCloud__2aV4A\",\"blueCloud\":\"MessageItem_blueCloud__1bsjS\",\"radiusBottomNone\":\"MessageItem_radiusBottomNone__1gULE\",\"radiusTopRightNone\":\"MessageItem_radiusTopRightNone__1HU6T\",\"greenCloud\":\"MessageItem_greenCloud__2DrUn\"};","import React from 'react';\r\nimport classes from'./../Dialogs.module.css';\r\nimport {NavLink} from \"react-router-dom\";\r\n\r\n\r\nconst DialogItem = (props) => {\r\n    let path = \"/dialogs/\" + '' + props.dialogId;\r\n    return (\r\n        <div className={classes.dialog}>\r\n            <NavLink \r\n                to={path} activeClassName={classes.activeLink}>\r\n                    {props.name}\r\n            </NavLink>\r\n        </div>\r\n\t);\r\n}\r\n\r\nexport default DialogItem;","import React from 'react';\r\nimport classes from'./MessageItem.module.css';\r\nimport {getAuthorName} from '../../../redux/store'\r\n\r\nconst MessageItem = (props) => {\r\n    \r\n\r\n    \r\n    let myId = 0;\r\n    let myCloudColorClass = props.userid === myId ? \"blueCloud\" : \"greenCloud\";\r\n    let alignText =  props.userid === myId ? 'messageAlignLeft': 'messageAlignRight';\r\n    let hiddenAuthor = props.order.sameNextUserId ? 'hiddenAuthor' : '';\r\n    let radiusBottomNone = props.order.sameNextUserId ? 'radiusBottomNone' : '';\r\n    let radiusTopRightNone = props.order.samePrevUserId ? 'radiusTopRightNone' : '';\r\n    let authorName =  getAuthorName( props.userid, props.props.dialogsPage.dialogs );\r\n    // console.log(hiddenAuthor,radiusBottomNone, props.message)\r\n    let messageWasHovered = (e) => {\r\n        \r\n        e.currentTarget.parentElement.children[1].classList.add('authorHovered')\r\n    };\r\n    return (\r\n        <div className={classes.messages}>\r\n            <div className={classes.message +' '+ classes[alignText]}>\r\n                <div className={ classes[myCloudColorClass] + ' ' + \r\n                                 classes.messageCloud + ' ' + \r\n                                 classes[radiusBottomNone] + ' ' + \r\n                                 classes[radiusTopRightNone]\r\n                                 } onMouseOver={messageWasHovered}> {props.message}</div>\r\n                <div className={ classes.author + ' ' + \r\n                                 classes[hiddenAuthor]  }>{authorName}</div>\r\n            </div>\r\n        </div>\r\n\t);\r\n}\r\n\r\nexport default MessageItem;","import dialogsReducer from './dialogsReducer';\r\nimport profileReducer from './profileReducer';\r\nimport sidebarReducer from './sidebarReducer';\r\n\r\n\r\nlet store = {\r\n    _state: {\r\n        profilePage: {\r\n            posts : [\r\n                { id: 1, likescount: 1, post: 'Hi, how are you?' },\r\n                { id: 2, likescount: 11, post: 'It\\'s my first post' }\r\n            ],\r\n            newPostText: 'default post text'\r\n        },\r\n        dialogsPage : {\r\n            \r\n            dialogs : [\r\n                { id: 1, name: 'Ivan' },\r\n                { id: 2, name: 'Sergey' },\r\n                { id: 3, name: 'Stas' },\r\n                { id: 4, name: 'Nataliya' }\r\n            ],\r\n            messages : [\r\n                { id: 1, userid: 2, message: 'Hi' },\r\n                { id: 2, userid: 0, message: 'Hi' },\r\n                { id: 3, userid: 2, message: 'How are you?' },\r\n                { id: 4, userid: 2, message: 'Have you ever coded in React?' },\r\n                { id: 5, userid: 2, message: 'I have special offer for you)) Text me back, please)' }\r\n            ],\r\n            newMessageText: ''\r\n        },\r\n        friends: {\r\n\r\n        },\r\n        sidebar: {\r\n            \r\n        }\r\n    },\r\n\r\n    _callSubscriber () {\r\n        console.log('state was changed')\r\n    },\r\n\r\n    getState (){\r\n        return this._state;\r\n    },\r\n\r\n    \r\n\r\n    subscribe (observer) {\r\n        this._callSubscriber = observer;\r\n    },\r\n\r\n    \r\n    // addPost (){\r\n    //     let newPost =  { \r\n    //         id: this._state.profilePage.posts.length + 1, \r\n    //         post: this._state.profilePage.newPostText,\r\n    //         likescount: 0  \r\n    //     };\r\n    //     this._state.profilePage.posts.push(newPost);\r\n    //     this._state.profilePage.newPostText = '';\r\n    //     this._callSubscriber(this._state); \r\n    // },\r\n\r\n    // updateNewPostText (postMessage) {\r\n    //     this._state.profilePage.newPostText = postMessage;\r\n    //     this._callSubscriber(this._state); \r\n    // },\r\n\r\n    dispatch( action ){\r\n        \r\n        profileReducer(this._state.profilePage, action);\r\n        dialogsReducer(this._state.dialogsPage, action);\r\n        sidebarReducer(this._state.sidebar, action);\r\n       \r\n        this._callSubscriber(this._state);\r\n    }\r\n   \r\n\r\n};\r\n\r\nexport const getAuthorName = (authorId, array) => {\r\n\r\n    let length = array.length;\r\n    if(authorId === 0) return \"Me\";\r\n        for (let i = 0; i < length; i++){\r\n            if ( array[i].id === authorId ){\r\n                return array[i].name;\r\n            }\r\n        }\r\n        \r\n};\r\n\r\nexport default store;\r\n//window.store = store;","import React, { useState, useEffect }  from 'react';\r\nimport classes from'./Dialogs.module.css';\r\nimport DialogItem from './DialogItem/DialogItem'\r\nimport MessageItem from './MessageItem/MessageItem'\r\nimport { Redirect } from 'react-router-dom'\r\nimport { Field, reduxForm } from 'redux-form'\r\nimport { TextArea } from './../../components/Common/FormControls/FormControls'\r\nimport { required, maxLengthThunkCreator } from './../../utils/validators/validators'\r\n\r\nconst maxLength140 = maxLengthThunkCreator(140);\r\n\r\nconst Dialogs = (props) => {\r\n    \r\n    let state = props.dialogsPage;\r\n     \r\n    let dialogsElements = state.dialogs.map( (d) => <DialogItem name={d.name} dialogId={d.id} key={d.id}/>);\r\n    let messagesElements = state.messages.map( (m, i, arr) => {\r\n    \r\n    let order= {\r\n        samePrevUserId: i > 0 && m.userid === arr[i-1].userid ? true : false,\r\n        sameNextUserId: i < arr.length-1 && m.userid === arr[i+1].userid ? true : false\r\n    } \r\n   \r\n    return <MessageItem props={props} order={order} message={m.message} userid={m.userid} key={m.id}/>\r\n    } );\r\n    \r\n\r\n    let AddNewMessage = (values) => {\r\n        props.addMessage(values.newMessageText);  \r\n    }\r\n\r\n    let messagesElement = React.createRef();\r\n \r\n    \r\n    useEffect(() => {\r\n        if ( props.isAuth === true ) {\r\n            messagesElement.current.scrollTo(0, messagesElement.current.scrollHeight);\r\n        }\r\n    });\r\n\r\n    if ( props.isAuth === false ) {\r\n        return <Redirect to={\"/login\"} />\r\n    }\r\n\r\n\treturn (\r\n\t\t<div className={classes.dialogs}>\r\n\t\t\t<div className={classes.dialogsItems}>\r\n                { dialogsElements }\r\n\t\t\t</div>\r\n\t\t\t\t\t\r\n\t\t\t<div className={ classes.messages }\r\n                 ref={ messagesElement } >\r\n                { messagesElements }\r\n\t\t\t</div>\r\n            <div className = {classes.newPostArea}>\r\n                <AddMessageReduxForm onSubmit={AddNewMessage}/>\r\n            </div>\r\n            \r\n\t\t</div>\r\n\t);\r\n}\r\n\r\nconst AddMessageForm = (props) => {\r\n    return (\r\n        <form onSubmit={props.handleSubmit}>\r\n            \r\n                <div className={classes.newTextArea}>\r\n                    <Field component={TextArea} \r\n                           validate={[required, maxLength140]}\r\n                           name=\"newMessageText\" \r\n                           placeholder=\"New message\"/>\r\n                </div>\r\n\r\n                <div className={classes.buttons}>\r\n                    <div className={classes.textAdd}>\r\n                        <button>Add message</button>\r\n                    </div> \r\n                    <div className={classes.textRemove}>\r\n                        <button>Remove message</button> \r\n                    </div> \r\n                </div>\r\n       \r\n        </form>\r\n    )\r\n};\r\n\r\nconst AddMessageReduxForm = reduxForm({form: \"AddMessageForm\"})(AddMessageForm)\r\nexport default Dialogs;","\r\nimport Dialogs from './Dialogs'\r\nimport {sendNewMessageCreator, updateNewMessageBodyCreator} from '../../redux/dialogsReducer';\r\n// import StoreContext from '../../StoreContext'\r\nimport {connect}  from 'react-redux'\r\nimport  {compose} from 'redux';\r\nimport { withAuthRedirect } from './../../hoc/WithAuthRedirect'\r\n\r\n\r\nlet mapStateToProps = (state) => { \r\n    return {\r\n        dialogsPage: state.dialogsPage\r\n    };\r\n};\r\n\r\nlet mapDispatchToProps = (dispatch) => { \r\n    return {\r\n        addMessage: (newMessageText) => { \r\n            dispatch( sendNewMessageCreator(newMessageText) ); \r\n        },\r\n        // changeNewMessage: (body) => {  \r\n        //     dispatch( updateNewMessageBodyCreator(body) );\r\n        // },\r\n        removeMessage:  () => { \r\n            alert(\"Remove post\")\r\n        }\r\n    };\r\n};\r\n\r\nexport default compose(\r\n    connect( mapStateToProps, mapDispatchToProps ),\r\n    withAuthRedirect\r\n)(Dialogs);\r\n\r\n// let DialogsRedirectComponent = withAuthRedirect( Dialogs );\r\n\r\n// //const DialogsContainer = connect( mapStateToProps, mapDispatchToProps )( Dialogs );\r\n// const DialogsContainer = connect( mapStateToProps, mapDispatchToProps )( DialogsRedirectComponent );\r\n\r\n\r\n// const DialogsContainer = (props) => {\r\n    \r\n// \treturn (\r\n//         <StoreContext.Consumer>\r\n//             {\r\n//                 (store) => {\r\n//                     let state = store.getState().dialogsPage;\r\n\r\n//                     let addMessage = (body) => {\r\n//                         store.dispatch( sendNewMessageCreator(body))\r\n//                     };\r\n                \r\n//                     let changeMessage = (body) => {\r\n//                         store.dispatch( updateNewMessageBodyCreator(body))\r\n//                     }; \r\n                \r\n//                     let removeMessage = () => {alert(\"Remove post\")};\r\n\r\n//                     return <Dialogs changeNewMessage={changeMessage} \r\n//                     addMessage={addMessage} \r\n//                     removeMessage={removeMessage}\r\n//                     dialogsPage={state}\r\n//                     />\r\n//                 }\r\n//             }\r\n//         </StoreContext.Consumer>\r\n        \r\n// \t);\r\n// }\r\n\r\n\r\n//export default DialogsContainer;"],"sourceRoot":""}